[{"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts":"1","/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts":"2","/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts":"3","/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts":"4","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx":"5","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts":"6","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx":"7","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts":"8","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx":"9","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx":"10","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx":"11","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx":"12","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx":"13","/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx":"14","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts":"15","/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx":"16","/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx":"17"},{"size":996,"mtime":1623426633989,"results":"18","hashOfConfig":"19"},{"size":1117,"mtime":1621078065416,"results":"20","hashOfConfig":"19"},{"size":1182,"mtime":1613225443706,"results":"21","hashOfConfig":"19"},{"size":321,"mtime":1616829375770,"results":"22","hashOfConfig":"19"},{"size":1749,"mtime":1623416996447,"results":"23","hashOfConfig":"19"},{"size":293,"mtime":1622026327302,"results":"24","hashOfConfig":"19"},{"size":9116,"mtime":1623464614508,"results":"25","hashOfConfig":"19"},{"size":2399,"mtime":1622446639574,"results":"26","hashOfConfig":"19"},{"size":6837,"mtime":1623426152838,"results":"27","hashOfConfig":"19"},{"size":3305,"mtime":1623426237529,"results":"28","hashOfConfig":"19"},{"size":3388,"mtime":1623426215798,"results":"29","hashOfConfig":"19"},{"size":5802,"mtime":1623497665138,"results":"30","hashOfConfig":"19"},{"size":2303,"mtime":1622981443801,"results":"31","hashOfConfig":"19"},{"size":3890,"mtime":1623426633992,"results":"32","hashOfConfig":"19"},{"size":5010,"mtime":1623497282438,"results":"33","hashOfConfig":"19"},{"size":1970,"mtime":1620488033239,"results":"34","hashOfConfig":"19"},{"size":426,"mtime":1622030019269,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cc816",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx",["71","72"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport parse from 'date-fns/parse';\nimport parseISO from 'date-fns/parseISO';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getBrowserLanguage, getElementByClassNameRecursive } from '../../common-functions';\nimport ContentEditableInput from '../content-editable-input/content-editable-input.component';\nimport OverlayPanel from '../../overlay/overlay-panel/overlay-panel.component';\nimport DateTimeDaySelector, { DaySelectorTemplate } from './date-time-day-selector.component';\nimport DateTimeMonthSelector, { MonthSelectorTemplate } from './date-time-month-selector.component';\nimport DateTimeTimeSelector, { TimeSelectorTemplate } from './date-time-time-selector.component';\nimport { DateSelectionType, TimeConstraints } from './date-time-types';\nimport DateTimeYearSelector, { YearSelectorTemplate } from './date-time-year-selector.component';\nimport reducer, { DateTimeActionType, DateTimeState } from './date-time.reducer';\n\nexport interface DateTimeProps {\n  value?: string | Date;\n  label?: string;\n  useDefaultDateValue?: boolean;\n  locale?: string;\n  dateSelection?: DateSelectionType;\n  timeConstraints?: TimeConstraints;\n  onChange?: (value: Date) => void;\n  daySelectorTemplate?: DaySelectorTemplate;\n  monthSelectorTemplate?: MonthSelectorTemplate;\n  yearSelectorTemplate?: YearSelectorTemplate;\n  timeSelectorTemplate?: TimeSelectorTemplate;\n}\n\nexport default function DateTime({\n  value,\n  label,\n  useDefaultDateValue = false,\n  locale,\n  dateSelection = DateSelectionType.DateTime,\n  timeConstraints,\n  onChange,\n  daySelectorTemplate,\n  monthSelectorTemplate,\n  yearSelectorTemplate,\n  timeSelectorTemplate,\n}: DateTimeProps) {\n  const [selectorOpen, setSelectorOpen] = useState(false);\n  const [dropDownTarget, setDropDownTarget] = useState<Element>();\n  const language = useRef<string>(locale || getBrowserLanguage());\n  const loadedLocale = useRef<Locale>();\n\n  useEffect(() => {\n    if (language.current) {\n      loadLocale(language.current);\n    }\n  }, [language]);\n\n  useEffect(() => {\n    if (locale) {\n      loadLocale(locale);\n    }\n  }, [locale]);\n\n  const loadLocale = (localeToLoad: string) => {\n    import(`date-fns/locale/${localeToLoad}`)\n      .then((locale) => {\n        loadedLocale.current = locale.default;\n        const defaultDate = getDateValue();\n\n        if (value || useDefaultDateValue) {\n          dispatcher({\n            type: DateTimeActionType.InitializeDates,\n            initialDate: defaultDate,\n          });\n        } else {\n          dispatcher({\n            type: DateTimeActionType.SetViewDate,\n            viewDate: defaultDate,\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  };\n\n  const parseDate = (dateValue: string) => {\n    const isoDate = parseISO(dateValue);\n    if (isNaN(isoDate.valueOf())) {\n      // TODO Add an option for short, medium or long date format and create a proper format string (below) for each\n      // this is an attempt to parse a number of date formats\n      let localDate = parse(dateValue, 'Ppp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'P', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'pp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'p', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      return undefined;\n    }\n\n    return isoDate;\n  };\n\n  const getDateValue = () => {\n    const defaultDate = new Date();\n    defaultDate.setHours(0, 0, 0, 0);\n\n    return value ? (typeof value === 'string' ? parseDate(value) : value) : defaultDate;\n  };\n\n  const initialState: DateTimeState = {\n    currentSelector:\n      dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    currentViewDate: new Date(),\n    selectedDateChanged: false,\n    dateInitialized: false,\n  };\n\n  const [state, dispatcher] = useReducer(reducer, initialState);\n\n  const onFocus = (event: React.FocusEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(true);\n  };\n\n  const onInput = (event: React.FormEvent) => {\n    const inputDate = parseDate((event.target as HTMLElement).innerText);\n    if (inputDate) {\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: inputDate,\n      });\n      dispatcher({\n        type: DateTimeActionType.SetSelectedDate,\n        selectedDate: inputDate,\n      });\n    }\n  };\n\n  const onCalendarClick = (event: React.MouseEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(!selectorOpen);\n  };\n\n  const setDropDownElement = (event: React.FocusEvent | React.MouseEvent) => {\n    if (!dropDownTarget) {\n      const parentElement = getElementByClassNameRecursive(event.target as HTMLElement, 'parent-element');\n      setDropDownTarget(parentElement);\n    }\n  };\n\n  const onDateTimeHidden = () => {\n    setSelectorOpen(false);\n    dispatcher({\n      type:\n        dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    });\n\n    if (onChange && state.selectedDate && state.selectedDateChanged) {\n      onChange(state.selectedDate);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateChanged,\n        selectedDate: state.selectedDate,\n      });\n    }\n  };\n\n  const getValue = () => {\n    switch (dateSelection) {\n      case DateSelectionType.DateTime:\n        return state.selectedDate ? state.selectedDate.toLocaleString(language.current) : '';\n      case DateSelectionType.DateOnly:\n        return state.selectedDate ? state.selectedDate.toLocaleDateString(language.current) : '';\n      case DateSelectionType.TimeOnly:\n        return state.selectedDate ? state.selectedDate.toLocaleTimeString(language.current) : '';\n      default:\n        return state.selectedDate ? state.selectedDate.toLocaleString(language.current) : '';\n    }\n  };\n\n  const canShowDateSelectors =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.DateOnly;\n\n  const canShowTimeSelector =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.TimeOnly;\n\n  return (\n    <div>\n      {label && <label className=\"dark:text-white\">{label}</label>}\n      <ContentEditableInput\n        value={getValue()}\n        className=\"parent-element text-left\"\n        rightElement={<FontAwesomeIcon icon={['far', 'calendar-alt']} />}\n        rightElementClassName=\"cursor-pointer\"\n        onRightElementClick={onCalendarClick}\n        onFocus={onFocus}\n        onInput={onInput}\n      />\n      <OverlayPanel\n        visible={selectorOpen}\n        target={dropDownTarget}\n        shouldTargetCloseOverlay={false}\n        hidden={onDateTimeHidden}\n      >\n        <>\n          {state.currentSelector === DateTimeActionType.DaySelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeDaySelector\n                selectedDate={state.selectedDate}\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                showTimeSelector={dateSelection === DateSelectionType.DateTime}\n                dispatcher={dispatcher}\n                viewTemplate={daySelectorTemplate}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.MonthSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeMonthSelector\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                viewTemplate={monthSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.YearSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeYearSelector\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                viewTemplate={yearSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.TimeSelector &&\n            canShowTimeSelector &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeTimeSelector\n                viewDate={state.currentViewDate}\n                showDateSelector={dateSelection === DateSelectionType.DateTime}\n                locale={loadedLocale.current}\n                viewTemplate={timeSelectorTemplate}\n                timeConstraints={timeConstraints}\n                dispatcher={dispatcher}\n              />\n            )}\n        </>\n      </OverlayPanel>\n    </div>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx",[],{"ruleId":"73","severity":1,"message":"74","line":51,"column":6,"nodeType":"75","endLine":51,"endColumn":16,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"74","line":57,"column":6,"nodeType":"75","endLine":57,"endColumn":14,"suggestions":"77"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadLocale'. Either include it or remove the dependency array.","ArrayExpression",["78"],["79"],{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [language, loadLocale]",{"range":"84","text":"85"},"Update the dependencies array to be: [loadLocale, locale]",{"range":"86","text":"87"},[2077,2087],"[language, loadLocale]",[2166,2174],"[loadLocale, locale]"]