[{"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts":"1","/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts":"2","/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts":"3","/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts":"4","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx":"5","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts":"6","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx":"7","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts":"8","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx":"9","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx":"10","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx":"11","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx":"12","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx":"13","/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx":"14","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts":"15","/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx":"16","/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx":"17","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx":"18","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx":"19","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx":"20","/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts":"21","/System/Volumes/Data/development/beesoft-components/src/components/common/resize-observer/resize-observer.provider.tsx":"22","/System/Volumes/Data/development/beesoft-components/src/services/resize-observer.service.ts":"23"},{"size":1086,"mtime":1623583029073,"results":"24","hashOfConfig":"25"},{"size":1117,"mtime":1621078065416,"results":"26","hashOfConfig":"25"},{"size":1182,"mtime":1613225443706,"results":"27","hashOfConfig":"25"},{"size":321,"mtime":1616829375770,"results":"28","hashOfConfig":"25"},{"size":4338,"mtime":1625143315170,"results":"29","hashOfConfig":"25"},{"size":478,"mtime":1625143315169,"results":"30","hashOfConfig":"25"},{"size":13884,"mtime":1626444841018,"results":"31","hashOfConfig":"25"},{"size":3992,"mtime":1625143315172,"results":"32","hashOfConfig":"25"},{"size":6837,"mtime":1623585887820,"results":"33","hashOfConfig":"25"},{"size":2954,"mtime":1625143315170,"results":"34","hashOfConfig":"25"},{"size":3062,"mtime":1625143315168,"results":"35","hashOfConfig":"25"},{"size":3508,"mtime":1624797299166,"results":"36","hashOfConfig":"25"},{"size":2303,"mtime":1622981443801,"results":"37","hashOfConfig":"25"},{"size":4163,"mtime":1626445002270,"results":"38","hashOfConfig":"25"},{"size":5457,"mtime":1624797299167,"results":"39","hashOfConfig":"25"},{"size":1964,"mtime":1625311737686,"results":"40","hashOfConfig":"25"},{"size":426,"mtime":1622030019269,"results":"41","hashOfConfig":"25"},{"size":6326,"mtime":1624797299165,"results":"42","hashOfConfig":"25"},{"size":2907,"mtime":1624797299168,"results":"43","hashOfConfig":"25"},{"size":985,"mtime":1624797299169,"results":"44","hashOfConfig":"25"},{"size":632,"mtime":1624797299164,"results":"45","hashOfConfig":"25"},{"size":3001,"mtime":1625307415247,"results":"46","hashOfConfig":"25"},{"size":1952,"mtime":1626445500283,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"159z7wp",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx",["96"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport parse from 'date-fns/parse';\nimport parseISO from 'date-fns/parseISO';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\nimport ResizeObserverService from '../../../services/resize-observer.service';\nimport { getBrowserLanguage, getElementByClassNameRecursive } from '../../common-functions';\nimport ResizeObserverProvider from '../../common/resize-observer/resize-observer.provider';\nimport OverlayPanel from '../../overlay/overlay-panel/overlay-panel.component';\nimport ContentEditableInput from '../content-editable-input/content-editable-input.component';\nimport DateTimeDaySelector, { DaySelectorTemplate } from './date-time-day-selector.component';\nimport { loadLocale } from './date-time-functions';\nimport DateTimeMonthSelector, { MonthSelectorTemplate } from './date-time-month-selector.component';\nimport DateTimeRangeSelector from './date-time-range-selector.component';\nimport DateTimeTimeSelector, { TimeSelectorTemplate } from './date-time-time-selector.component';\nimport { CalendarIconPosition, DateFormatType, DateSelectionType, TimeConstraints } from './date-time-types';\nimport DateTimeYearSelector, { YearSelectorTemplate } from './date-time-year-selector.component';\nimport reducer, { DateTimeActionType, DateTimeState } from './date-time.reducer';\n\nexport interface DateTimeProps {\n  value?: string | Date | Array<Date>;\n  label?: string;\n  useDefaultDateValue?: boolean;\n  locale?: string;\n  dateSelection?: DateSelectionType;\n  dateFormat?: DateFormatType;\n  timeConstraints?: TimeConstraints;\n  iconPosition?: CalendarIconPosition;\n  selectableDate?: (currentDate: Date) => boolean;\n  isValidDate?: (selectedDate: Date) => boolean;\n  onChange?: (value: Date | Array<Date>) => void;\n  daySelectorTemplate?: DaySelectorTemplate;\n  monthSelectorTemplate?: MonthSelectorTemplate;\n  yearSelectorTemplate?: YearSelectorTemplate;\n  timeSelectorTemplate?: TimeSelectorTemplate;\n}\n\nexport default function DateTime({\n  value,\n  label,\n  useDefaultDateValue = false,\n  locale,\n  dateSelection = DateSelectionType.DateTime,\n  dateFormat,\n  timeConstraints,\n  iconPosition = CalendarIconPosition.Right,\n  selectableDate,\n  isValidDate,\n  onChange,\n  daySelectorTemplate,\n  monthSelectorTemplate,\n  yearSelectorTemplate,\n  timeSelectorTemplate,\n}: DateTimeProps) {\n  const [selectorOpen, setSelectorOpen] = useState(false);\n  const [dropDownTarget, setDropDownTarget] = useState<Element>();\n  const resizeObserver = useRef<ResizeObserverService>();\n  const language = useRef<string>(locale || getBrowserLanguage());\n  const loadedLocale = useRef<Locale>();\n\n  useEffect(() => {\n    if (language.current) {\n      loadLocaleObject(language.current);\n    }\n  }, [language]);\n\n  useEffect(() => {\n    if (locale) {\n      loadLocaleObject(locale);\n    }\n  }, [locale]);\n\n  useEffect(() => {\n    if (value) {\n      const dateValue = getDateValue();\n      dispatcher({\n        type: DateTimeActionType.InitializeDates,\n        initialDate: dateValue,\n      });\n    }\n  }, [value, loadedLocale.current]);\n\n  const loadLocaleObject = (localeToLoad: string) => {\n    loadLocale(localeToLoad)\n      .then((locale) => {\n        loadedLocale.current = locale;\n        const defaultDate = getDateValue();\n\n        if (value || useDefaultDateValue) {\n          dispatcher({\n            type: DateTimeActionType.InitializeDates,\n            initialDate: !Array.isArray(defaultDate) ? defaultDate : defaultDate[0],\n          });\n        } else {\n          dispatcher({\n            type: DateTimeActionType.SetViewDate,\n            viewDate: !Array.isArray(defaultDate) ? defaultDate : defaultDate[0],\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  };\n\n  const parseDate = (dateValue: string) => {\n    const isoDate = parseISO(dateValue);\n    if (isNaN(isoDate.valueOf())) {\n      // this is an attempt to parse a number of date formats\n      let localDate = parse(dateValue, 'Ppp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'P', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'pp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'p', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      return undefined;\n    }\n\n    return isoDate;\n  };\n\n  const parseDateRange = (dateRangeValue: string) => {\n    const datesToParse = dateRangeValue.split('-');\n    if (datesToParse.length !== 2) return undefined;\n\n    const dateValue1 = parseDate(datesToParse[0].trim());\n    if (!dateValue1) return undefined;\n\n    const dateValue2 = parseDate(datesToParse[1].trim());\n    if (!dateValue2) return undefined;\n\n    return [dateValue1, dateValue2];\n  };\n\n  const getDateValue = () => {\n    const defaultDate = new Date();\n    defaultDate.setHours(0, 0, 0, 0);\n\n    return value\n      ? typeof value === 'string'\n        ? dateSelection !== DateSelectionType.DateRange\n          ? parseDate(value)\n          : parseDateRange(value)\n        : value\n      : defaultDate;\n  };\n\n  const initialState: DateTimeState = {\n    currentSelector:\n      dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    currentViewDate: new Date(),\n    selectedDateChanged: false,\n    dateInitialized: false,\n  };\n\n  const [state, dispatcher] = useReducer(reducer, initialState);\n\n  const onFocus = (event: React.FocusEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(true);\n  };\n\n  const onInput = (event: React.FormEvent) => {\n    const inputDate = parseDate((event.target as HTMLElement).innerText);\n    if (inputDate) {\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: inputDate,\n      });\n      dispatcher({\n        type: DateTimeActionType.SetSelectedDate,\n        selectedDate: inputDate,\n      });\n    }\n  };\n\n  const onCalendarClick = (event: React.MouseEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(!selectorOpen);\n  };\n\n  const setDropDownElement = (event: React.FocusEvent | React.MouseEvent) => {\n    if (!dropDownTarget) {\n      const parentElement = getElementByClassNameRecursive(event.target as HTMLElement, 'parent-element');\n      setDropDownTarget(parentElement);\n    }\n  };\n\n  const onDateTimeHidden = () => {\n    setSelectorOpen(false);\n    dispatcher({\n      type:\n        dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    });\n\n    if (onChange && dateSelection !== DateSelectionType.DateRange && state.selectedDate && state.selectedDateChanged) {\n      onChange(state.selectedDate);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateChanged,\n        selectedDate: state.selectedDate,\n      });\n    } else if (onChange && state.selectedStartDate && state.selectedEndDate && state.selectedDateChanged) {\n      onChange([state.selectedStartDate, state.selectedEndDate]);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateRangeChanged,\n        selectedStartDate: state.selectedStartDate,\n        selectedEndDate: state.selectedEndDate,\n      });\n    }\n  };\n\n  const getDateTimeStyle = () => {\n    switch (dateFormat) {\n      case DateFormatType.Short:\n        return 'short';\n      case DateFormatType.Medium:\n        return 'medium';\n      case DateFormatType.Long:\n        return 'long';\n      default:\n        return undefined;\n    }\n  };\n\n  const getValue = () => {\n    const dateStyle = getDateTimeStyle();\n\n    switch (dateSelection) {\n      case DateSelectionType.DateTime:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.DateOnly:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleDateString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.TimeOnly:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleTimeString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.DateRange:\n        return state.selectedStartDate && state.selectedEndDate\n          ? dateStyle\n            ? `${state.selectedStartDate.toLocaleDateString(loadedLocale.current?.code, {\n                dateStyle,\n              })} - ${state.selectedEndDate.toLocaleDateString(loadedLocale.current?.code, { dateStyle })}`\n            : `${state.selectedStartDate.toLocaleDateString(\n                loadedLocale.current?.code\n              )} - ${state.selectedEndDate.toLocaleDateString(loadedLocale.current?.code)}`\n          : '';\n      default:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n    }\n  };\n\n  const onMarkupCreated = (element: Element) => {\n    console.log('markup created', element);\n    resizeObserver.current = new ResizeObserverService(element);\n    resizeObserver.current?.observe();\n    resizeObserver.current?.getEntries().subscribe((rect) => console.log('rectangle', rect));\n  };\n\n  const canShowDateSelectors =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.DateOnly;\n\n  const canShowTimeSelector =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.TimeOnly;\n\n  const inputProps =\n    iconPosition === CalendarIconPosition.Right\n      ? {\n          rightElement: <FontAwesomeIcon icon={['far', 'calendar-alt']} />,\n          rightElementClassName: 'cursor-pointer',\n          onRightElementClick: onCalendarClick,\n        }\n      : {\n          leftElement: <FontAwesomeIcon icon={['far', 'calendar-alt']} />,\n          leftElementClassName: 'cursor-pointer',\n          onLeftElementClick: onCalendarClick,\n        };\n\n  return (\n    <div>\n      {label && <label className=\"dark:text-white\">{label}</label>}\n      <ContentEditableInput\n        value={getValue()}\n        className=\"parent-element text-left\"\n        onFocus={onFocus}\n        onInput={onInput}\n        {...inputProps}\n      />\n      <OverlayPanel\n        visible={selectorOpen}\n        target={dropDownTarget}\n        shouldTargetCloseOverlay={false}\n        hidden={onDateTimeHidden}\n        markupCreated={onMarkupCreated}\n      >\n        <>\n          {state.currentSelector === DateTimeActionType.DaySelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeDaySelector\n                selectedDate={state.selectedDate}\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                showTimeSelector={dateSelection === DateSelectionType.DateTime}\n                selectableDate={selectableDate}\n                isValidDate={isValidDate}\n                dispatcher={dispatcher}\n                viewTemplate={daySelectorTemplate}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.MonthSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeMonthSelector\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                viewTemplate={monthSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.YearSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeYearSelector\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                viewTemplate={yearSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.TimeSelector &&\n            canShowTimeSelector &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeTimeSelector\n                viewDate={state.currentViewDate}\n                showDateSelector={dateSelection === DateSelectionType.DateTime}\n                locale={loadedLocale.current}\n                viewTemplate={timeSelectorTemplate}\n                timeConstraints={timeConstraints}\n                dispatcher={dispatcher}\n              />\n            )}\n          {dateSelection === DateSelectionType.DateRange && state.dateInitialized && loadedLocale.current && (\n            <DateTimeRangeSelector\n              viewDate={state.currentViewDate}\n              selectedStartDate={state.selectedStartDate}\n              selectedEndDate={state.selectedEndDate}\n              locale={loadedLocale.current}\n              dispatcher={dispatcher}\n            />\n          )}\n        </>\n      </OverlayPanel>\n    </div>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/resize-observer/resize-observer.provider.tsx",["97"],"import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nexport interface ResizeObserverProviderProps {\n  observationTarget?: Element | SVGElement;\n  children: React.ReactNode;\n}\n\nconst ResizeObserverContext = createContext<ClientRect | DOMRect>(undefined!);\n\nexport function useResizeObserver() {\n  return useContext(ResizeObserverContext);\n}\n\nexport default function ResizeObserverProvider({ observationTarget, children }: ResizeObserverProviderProps) {\n  const [observerEntries, setObserverEntries] = useState<ClientRect | DOMRect>({\n    bottom: 0,\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 0,\n    width: 0,\n    x: 0,\n    y: 0,\n  });\n  const hasResizeObserver = useRef(!!ResizeObserver);\n  const resizeObserverRef = useRef<ResizeObserver>();\n  const mutationObserverRef = useRef<MutationObserver>();\n  const previousTarget = useRef<Element | SVGElement>();\n\n  const config: MutationObserverInit = {\n    attributeFilter: ['style'],\n    attributes: true,\n    subtree: true,\n  };\n\n  useEffect(() => {\n    console.log('children', children);\n    if (hasResizeObserver.current) {\n      resizeObserverRef.current = new ResizeObserver(resizeObserverCallback);\n    } else {\n      mutationObserverRef.current = new MutationObserver(mutationObserverCallback);\n    }\n\n    return () => disconnect();\n  }, []);\n\n  useEffect(() => {\n    if (observationTarget) {\n      if (previousTarget.current) {\n        unobserve(previousTarget.current);\n      }\n\n      previousTarget.current = observationTarget;\n      observe();\n    }\n  }, [observationTarget]);\n\n  const observe = () => {\n    if (observationTarget) {\n      if (hasResizeObserver.current) {\n        resizeObserverRef.current?.observe(observationTarget);\n      } else {\n        mutationObserverRef.current?.observe(observationTarget, config);\n      }\n    }\n  };\n\n  const unobserve = (target: Element | SVGElement) => {\n    if (hasResizeObserver.current) {\n      resizeObserverRef.current?.unobserve(target);\n    } else {\n      mutationObserverRef.current?.disconnect();\n    }\n  };\n\n  const disconnect = () => {\n    if (hasResizeObserver.current) {\n      resizeObserverRef.current?.disconnect();\n    } else {\n      mutationObserverRef.current?.disconnect();\n    }\n  };\n\n  const resizeObserverCallback = (entries: Array<ResizeObserverEntry>) => {\n    setObserverEntries(entries[entries.length - 1].contentRect);\n  };\n\n  const mutationObserverCallback = (entries: Array<MutationRecord>) => {\n    const possibleEntries = entries.filter((entry) => observationTarget?.contains(entry.target));\n    const mutationEntry = possibleEntries[possibleEntries.length - 1].target as HTMLElement;\n    setObserverEntries({\n      top: mutationEntry.offsetTop,\n      left: mutationEntry.offsetLeft,\n      width: mutationEntry.offsetWidth,\n      height: mutationEntry.offsetHeight,\n      bottom: 0,\n      right: 0,\n    });\n  };\n\n  return <ResizeObserverContext.Provider value={observerEntries}>{children}</ResizeObserverContext.Provider>;\n}\n","/System/Volumes/Data/development/beesoft-components/src/services/resize-observer.service.ts",[],{"ruleId":"98","severity":1,"message":"99","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":8,"column":67,"nodeType":"104","messageId":"105","endLine":8,"endColumn":77},"@typescript-eslint/no-unused-vars","'ResizeObserverProvider' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull"]