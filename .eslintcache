[{"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts":"1","/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts":"2","/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts":"3","/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts":"4","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx":"5","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts":"6","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx":"7","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts":"8","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx":"9","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx":"10","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx":"11","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx":"12","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx":"13","/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx":"14","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts":"15","/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx":"16","/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx":"17","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx":"18","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx":"19","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx":"20","/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts":"21"},{"size":1086,"mtime":1623583029073,"results":"22","hashOfConfig":"23"},{"size":1117,"mtime":1621078065416,"results":"24","hashOfConfig":"23"},{"size":1182,"mtime":1613225443706,"results":"25","hashOfConfig":"23"},{"size":321,"mtime":1616829375770,"results":"26","hashOfConfig":"23"},{"size":3445,"mtime":1624115670314,"results":"27","hashOfConfig":"23"},{"size":423,"mtime":1624184254758,"results":"28","hashOfConfig":"23"},{"size":11853,"mtime":1624720865516,"results":"29","hashOfConfig":"23"},{"size":2811,"mtime":1624708884937,"results":"30","hashOfConfig":"23"},{"size":6837,"mtime":1623585887820,"results":"31","hashOfConfig":"23"},{"size":3020,"mtime":1624626644616,"results":"32","hashOfConfig":"23"},{"size":3128,"mtime":1624626322237,"results":"33","hashOfConfig":"23"},{"size":3508,"mtime":1624626206084,"results":"34","hashOfConfig":"23"},{"size":2303,"mtime":1622981443801,"results":"35","hashOfConfig":"23"},{"size":3890,"mtime":1623426633992,"results":"36","hashOfConfig":"23"},{"size":5457,"mtime":1624188005479,"results":"37","hashOfConfig":"23"},{"size":1970,"mtime":1620488033239,"results":"38","hashOfConfig":"23"},{"size":426,"mtime":1622030019269,"results":"39","hashOfConfig":"23"},{"size":6552,"mtime":1624720255264,"results":"40","hashOfConfig":"23"},{"size":2907,"mtime":1624720255253,"results":"41","hashOfConfig":"23"},{"size":985,"mtime":1624626552175,"results":"42","hashOfConfig":"23"},{"size":632,"mtime":1624712778881,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cc816",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx",["90","91","92","93"],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx",["94"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport addYears from 'date-fns/addYears';\nimport setYear from 'date-fns/setYear';\nimport subYears from 'date-fns/subYears';\nimport React from 'react';\nimport TemplateOutlet, { TemplateFunction } from '../../common/template-outlet/template-outlet.component';\nimport { getTranslatedYearMatrix } from './date-time-functions';\nimport DateTimeScroller from './date-time-scroller.component';\nimport { DateTimeActionType, DateTimeReducerAction } from './date-time.reducer';\n\nexport interface DateTimeYearSelectorProps {\n  viewDate: Date;\n  locale: Locale;\n  viewTemplate?: YearSelectorTemplate;\n  dispatcher: React.Dispatch<DateTimeReducerAction>;\n}\n\nexport interface DateTimeYearSelectorTemplateProps {\n  viewDate: Date;\n  locale: Locale;\n  movePreviousDecade: () => void;\n  moveNextDecade: () => void;\n  onYearClicked: (year: string) => void;\n  yearMatrix: Array<Array<string>>;\n}\n\nexport type YearSelectorTemplate = TemplateFunction<DateTimeYearSelectorTemplateProps>;\n\nexport default function DateTimeYearSelector({\n  viewDate,\n  locale,\n  viewTemplate,\n  dispatcher,\n}: DateTimeYearSelectorProps) {\n  const yearMatrix = getTranslatedYearMatrix(viewDate, locale);\n\n  const movePreviousDecade = () => {\n    const previousDecade = subYears(viewDate, 10);\n    dispatcher({\n      type: DateTimeActionType.SetViewDate,\n      viewDate: previousDecade,\n    });\n  };\n\n  const moveNextDecade = () => {\n    const nextDecade = addYears(viewDate, 10);\n    dispatcher({\n      type: DateTimeActionType.SetViewDate,\n      viewDate: nextDecade,\n    });\n  };\n\n  const onYearClicked = (year: string) => {\n    const yearNumber = parseInt(year);\n    dispatcher({\n      type: DateTimeActionType.MonthSelector,\n      viewDate: setYear(viewDate, yearNumber),\n    });\n  };\n\n  const getCurrentDecade = () => `${yearMatrix[0][0].toString()} - ${yearMatrix[2][1].toString()}`;\n\n  const templateProps: DateTimeYearSelectorTemplateProps = {\n    viewDate,\n    locale,\n    movePreviousDecade,\n    moveNextDecade,\n    onYearClicked,\n    yearMatrix,\n  };\n\n  const defaultTemplate = (\n    props: DateTimeYearSelectorTemplateProps,\n    children?: React.ReactNode | React.ReactNodeArray\n  ) => <div style={{ minWidth: '20rem' }}>{children}</div>;\n\n  const template = viewTemplate || defaultTemplate;\n\n  return (\n    <TemplateOutlet props={templateProps} template={template}>\n      <DateTimeScroller title={getCurrentDecade()} onMovePrevious={movePreviousDecade} onMoveNext={moveNextDecade} />\n      <div className=\"w-full\">\n        <div className=\"grid grid-cols-4 gap-4\">\n          {yearMatrix.map((row, rIndex) =>\n            row.map((column, cIndex) => (\n              <div\n                key={rIndex.toString() + cIndex.toString()}\n                className=\"text-center cursor-pointer\"\n                onClick={() => onYearClicked(column)}\n              >\n                {column}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </TemplateOutlet>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx",["95"],"import { addYears, setMonth, subYears } from 'date-fns';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport TemplateOutlet, { TemplateFunction } from '../../common/template-outlet/template-outlet.component';\nimport { getTranslatedMonthMatrix } from './date-time-functions';\nimport DateTimeScroller from './date-time-scroller.component';\nimport { DateTimeActionType, DateTimeReducerAction } from './date-time.reducer';\n\nexport interface DateTimeMonthSelectorProps {\n  viewDate: Date;\n  locale: Locale;\n  viewTemplate?: MonthSelectorTemplate;\n  dispatcher: React.Dispatch<DateTimeReducerAction>;\n}\n\nexport interface DateTimeMonthSelectorTemplateProps {\n  viewDate: Date;\n  locale: Locale;\n  movePreviousYear: () => void;\n  moveNextYear: () => void;\n  onMonthClicked: (monthNumber: number) => void;\n  onYearClicked: () => void;\n}\n\nexport type MonthSelectorTemplate = TemplateFunction<DateTimeMonthSelectorTemplateProps>;\n\nexport default function DateTimeMonthSelector({\n  viewDate,\n  locale,\n  viewTemplate,\n  dispatcher,\n}: DateTimeMonthSelectorProps) {\n  const monthMatrix = useRef(getTranslatedMonthMatrix(locale));\n\n  const movePreviousYear = () => {\n    const previousYear = subYears(viewDate, 1);\n    dispatcher({\n      type: DateTimeActionType.SetViewDate,\n      viewDate: previousYear,\n    });\n  };\n\n  const moveNextYear = () => {\n    const nextYear = addYears(viewDate, 1);\n    dispatcher({\n      type: DateTimeActionType.SetViewDate,\n      viewDate: nextYear,\n    });\n  };\n\n  const onMonthClicked = (monthNumber: number) => {\n    dispatcher({\n      type: DateTimeActionType.DaySelector,\n      viewDate: setMonth(viewDate, monthNumber),\n    });\n  };\n\n  const getCurrentYear = () => {\n    return viewDate.toLocaleDateString(locale.code, {\n      year: 'numeric',\n    });\n  };\n\n  const onYearClicked = () => {\n    dispatcher({\n      type: DateTimeActionType.YearSelector,\n    });\n  };\n\n  const templateProps: DateTimeMonthSelectorTemplateProps = {\n    viewDate,\n    locale,\n    movePreviousYear,\n    moveNextYear,\n    onMonthClicked,\n    onYearClicked,\n  };\n\n  const defaultTemplate = (\n    props: DateTimeMonthSelectorTemplateProps,\n    children?: React.ReactNode | React.ReactNodeArray\n  ) => (\n    <div className=\"p-2\" style={{ minWidth: '20rem' }}>\n      {children}\n    </div>\n  );\n\n  const template = viewTemplate || defaultTemplate;\n\n  return (\n    <TemplateOutlet props={templateProps} template={template}>\n      <DateTimeScroller\n        title={getCurrentYear()}\n        onTitleClicked={onYearClicked}\n        onMovePrevious={movePreviousYear}\n        onMoveNext={moveNextYear}\n      />\n      <div className=\"w-full grid grid-cols-4 gap-4\">\n        {monthMatrix.current.map((row, rIndex) =>\n          row.map((column, cIndex) => (\n            <div\n              key={rIndex.toString() + cIndex.toString()}\n              className=\"text-center cursor-pointer\"\n              onClick={() => onMonthClicked(column.monthNumber)}\n            >\n              {column.monthName}\n            </div>\n          ))\n        )}\n      </div>\n    </TemplateOutlet>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx",["96","97","98"],"import cx from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { getBrowserLanguage } from '../../common-functions';\nimport { useKeyDown } from '../../common-hooks';\nimport { DayType, getMonthMatrix, getTranslatedDays, loadLocale } from './date-time-functions';\nimport { CalendarSelectionMode } from './date-time-types';\nimport { DateTimeActionType, DateTimeReducerAction } from './date-time.reducer';\n\nexport interface DateTimeCalendarProps {\n  viewDate: Date;\n  selectedDate?: Date;\n  selectedStartDate?: Date;\n  selectedEndDate?: Date;\n  selectionMode?: CalendarSelectionMode;\n  locale?: Locale;\n  onDateSelected?: (date: Date, options?: Record<string, any>) => void;\n  selectableDate?: (currentDate: Date) => boolean;\n  isValidDate?: (selectedDate: Date) => boolean;\n  dispatcher?: React.Dispatch<DateTimeReducerAction>;\n}\n\nexport default function DateTimeCalendar({\n  viewDate,\n  selectedDate,\n  selectedStartDate,\n  selectedEndDate,\n  selectionMode = CalendarSelectionMode.Normal,\n  locale,\n  onDateSelected,\n  selectableDate,\n  isValidDate,\n  dispatcher,\n}: DateTimeCalendarProps) {\n  const [monthMatrix, setMonthMatrix] = useState<Array<Array<DayType>>>();\n  const [isLocaleLoaded, setIsLocaleLoaded] = useState(false);\n  const loadedLocale = useRef<Locale>();\n  const weekDaysRef = useRef<Array<string>>();\n  const selectedDateRef = useRef<Date>();\n  const [selectedStartComparison, setSelectedStartComparison] = useState<number>();\n  const [selectedEndComparison, setSelectedEndComparison] = useState<number>();\n  // const selectedStartComparison = useRef<number>();\n  // const selectedEndComparison = useRef<number>();\n\n  const isShiftDown = useKeyDown('Shift');\n\n  const loadLocaleObject = async () => {\n    return locale || (await loadLocale(getBrowserLanguage()));\n  };\n\n  /**\n   * When the component first loads setup the locale either from the passed in property or load it from date-fns.\n   */\n  useEffect(() => {\n    loadLocaleObject()\n      .then((localeObject) => {\n        loadedLocale.current = localeObject;\n        weekDaysRef.current = getTranslatedDays(loadedLocale.current);\n        setIsLocaleLoaded(true);\n      })\n      .catch((error) => console.error(error));\n  }, []);\n\n  /**\n   * Each time the view date changes re-calculate the month matrix.\n   */\n  useEffect(() => {\n    if (viewDate && loadedLocale.current) {\n      setMonthMatrix(getMonthMatrix(viewDate, loadedLocale.current, selectionMode === CalendarSelectionMode.Normal));\n    }\n  }, [viewDate, isLocaleLoaded]);\n\n  useEffect(() => {\n    if (selectedDate) {\n      selectedDateRef.current = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n    }\n  }, [selectedDate]);\n\n  useEffect(() => {\n    if (selectedStartDate && selectedEndDate) {\n      console.log('selected start date', selectedStartDate);\n      console.log('selected end date', selectedEndDate);\n      setSelectedStartComparison(\n        new Date(selectedStartDate.getFullYear(), selectedStartDate.getMonth(), selectedStartDate.getDate()).getTime()\n      );\n      setSelectedEndComparison(\n        new Date(\n          selectedEndDate.getFullYear(),\n          selectedEndDate.getMonth(),\n          selectedEndDate.getDate(),\n          23,\n          59,\n          59\n        ).getTime()\n      );\n    }\n  }, [selectedStartDate, selectedEndDate]);\n\n  /**\n   * If the locale changes then re-calculate the month matrix's language.\n   */\n  useEffect(() => {\n    if (loadedLocale.current && locale) {\n      loadedLocale.current = locale;\n      setMonthMatrix(getMonthMatrix(viewDate, loadedLocale.current, selectionMode === CalendarSelectionMode.Normal));\n    }\n  }, [locale]);\n\n  const onDateClicked = (date: Date) => {\n    if (selectionMode === CalendarSelectionMode.Normal) {\n      if (dispatcher) {\n        dispatcher({\n          type: DateTimeActionType.SetSelectedDate,\n          selectedDate: date,\n        });\n        dispatcher({\n          type: DateTimeActionType.SetViewDate,\n          viewDate: date,\n        });\n      }\n\n      if (onDateSelected) {\n        onDateSelected(date);\n      }\n    } else {\n      if (!onDateSelected) throw new Error('Range selection mode requires onDateSelected to be set');\n      if (!selectedStartDate || (selectedStartDate && !isShiftDown)) {\n        onDateSelected(date);\n      } else if (selectedStartDate && isShiftDown) {\n        onDateSelected(date, { setEndDate: true });\n      }\n    }\n  };\n\n  const isSelectedDate = (currentDate: Date) => {\n    return selectedDateRef.current?.toLocaleDateString() === currentDate.toLocaleDateString();\n  };\n\n  const isInSelectedDateRange = (currentDate: Date) => {\n    if (selectedStartComparison && selectedEndComparison) {\n      const currentDateValue = currentDate.getTime();\n      return currentDateValue >= selectedStartComparison && currentDateValue <= selectedEndComparison;\n    }\n\n    return false;\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"grid grid-cols-7 gap-3\">\n        {weekDaysRef.current?.map((day, index) => (\n          <div key={index} className=\"text-center font-bold\">\n            {day}\n          </div>\n        ))}\n        {monthMatrix?.map((row, rIndex) =>\n          row.map((column, cIndex) => {\n            const isSelectable =\n              column.dayValue !== null && (selectableDate === undefined || selectableDate(column.dayValue));\n            const dayStyles = cx('text-center py-1', {\n              'text-gray-400': !column.isCurrent,\n              'bg-blue-100 dark:bg-white dark:text-black rounded-full':\n                column &&\n                column.dayValue &&\n                ((selectedDateRef.current && isSelectedDate(column.dayValue)) ||\n                  (selectedStartComparison && selectedEndComparison && isInSelectedDateRange(column.dayValue))),\n              'cursor-pointer': isSelectable,\n              'text-red-300 cursor-not-allowed': !isSelectable,\n            });\n\n            return (\n              <div\n                key={rIndex.toString() + cIndex.toString()}\n                className={dayStyles}\n                onClick={() =>\n                  column &&\n                  column.dayValue &&\n                  isSelectable &&\n                  (isValidDate === undefined || isValidDate(column.dayValue)) &&\n                  onDateClicked(column.dayValue)\n                }\n              >\n                {column.dayValue?.getDate().toLocaleString(loadedLocale.current?.code)}\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts",["99"],"import { useEffect, useState } from 'react';\n\nexport function useKeyDown(keyCode: string) {\n  const [keyDown, setKeyDown] = useState(false);\n\n  const downHandler = ({ key }) => {\n    if (key === keyCode) {\n      setKeyDown(true);\n    }\n  };\n  const upHandler = ({ key }) => {\n    if (key === keyCode) {\n      setKeyDown(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n\n  return keyDown;\n}\n",{"ruleId":"100","severity":1,"message":"101","line":59,"column":6,"nodeType":"102","endLine":59,"endColumn":16,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"101","line":65,"column":6,"nodeType":"102","endLine":65,"endColumn":14,"suggestions":"104"},{"ruleId":"100","severity":1,"message":"105","line":74,"column":6,"nodeType":"102","endLine":74,"endColumn":13,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":241,"column":78,"nodeType":null,"messageId":"109","endLine":241,"endColumn":121,"fix":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":10,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":61,"column":6,"nodeType":"102","endLine":61,"endColumn":8,"suggestions":"115"},{"ruleId":"100","severity":1,"message":"116","line":70,"column":6,"nodeType":"102","endLine":70,"endColumn":32,"suggestions":"117"},{"ruleId":"100","severity":1,"message":"118","line":106,"column":6,"nodeType":"102","endLine":106,"endColumn":14,"suggestions":"119"},{"ruleId":"100","severity":1,"message":"120","line":25,"column":6,"nodeType":"102","endLine":25,"endColumn":8,"suggestions":"121"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadLocaleObject'. Either include it or remove the dependency array.","ArrayExpression",["122"],["123"],"React Hook useEffect has a missing dependency: 'getDateValue'. Either include it or remove the dependency array.",["124"],"prettier/prettier","Replace `·dateStyle:·dateStyle,·timeStyle:·dateStyle` with `⏎················dateStyle:·dateStyle,⏎················timeStyle:·dateStyle,⏎·············`","replace",{"range":"125","text":"126"},"@typescript-eslint/no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar",["127"],"React Hook useEffect has a missing dependency: 'selectionMode'. Either include it or remove the dependency array. If 'setMonthMatrix' needs the current value of 'selectionMode', you can also switch to useReducer instead of useState and read 'selectionMode' in the reducer.",["128"],"React Hook useEffect has missing dependencies: 'selectionMode' and 'viewDate'. Either include them or remove the dependency array. If 'setMonthMatrix' needs the current value of 'viewDate', you can also switch to useReducer instead of useState and read 'viewDate' in the reducer.",["129"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},[8281,8324],"\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n             ",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [language, loadLocaleObject]",{"range":"145","text":"146"},"Update the dependencies array to be: [loadLocaleObject, locale]",{"range":"147","text":"148"},"Update the dependencies array to be: [getDateValue, value]",{"range":"149","text":"150"},"Update the dependencies array to be: [loadLocaleObject]",{"range":"151","text":"152"},"Update the dependencies array to be: [viewDate, isLocaleLoaded, selectionMode]",{"range":"153","text":"154"},"Update the dependencies array to be: [locale, selectionMode, viewDate]",{"range":"155","text":"156"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"157","text":"158"},[2403,2413],"[language, loadLocaleObject]",[2498,2506],"[loadLocaleObject, locale]",[2674,2681],"[getDateValue, value]",[2229,2231],"[loadLocaleObject]",[2508,2534],"[viewDate, isLocaleLoaded, selectionMode]",[3679,3687],"[locale, selectionMode, viewDate]",[606,608],"[downHandler, upHandler]"]