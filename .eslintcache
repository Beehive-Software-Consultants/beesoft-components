[{"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts":"1","/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts":"2","/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts":"3","/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts":"4","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx":"5","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts":"6","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx":"7","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts":"8","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx":"9","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx":"10","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx":"11","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx":"12","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx":"13","/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx":"14","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts":"15","/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx":"16","/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx":"17"},{"size":1006,"mtime":1623417164046,"results":"18","hashOfConfig":"19"},{"size":1117,"mtime":1621078065416,"results":"20","hashOfConfig":"19"},{"size":1182,"mtime":1613225443706,"results":"21","hashOfConfig":"19"},{"size":321,"mtime":1616829375770,"results":"22","hashOfConfig":"19"},{"size":1749,"mtime":1623416996447,"results":"23","hashOfConfig":"19"},{"size":293,"mtime":1622026327302,"results":"24","hashOfConfig":"19"},{"size":8964,"mtime":1623417025198,"results":"25","hashOfConfig":"19"},{"size":2399,"mtime":1622446639574,"results":"26","hashOfConfig":"19"},{"size":6832,"mtime":1622981443803,"results":"27","hashOfConfig":"19"},{"size":3315,"mtime":1622815112406,"results":"28","hashOfConfig":"19"},{"size":3476,"mtime":1622815112405,"results":"29","hashOfConfig":"19"},{"size":5678,"mtime":1623423009117,"results":"30","hashOfConfig":"19"},{"size":2303,"mtime":1622981443801,"results":"31","hashOfConfig":"19"},{"size":3885,"mtime":1623417025218,"results":"32","hashOfConfig":"19"},{"size":4694,"mtime":1623425125956,"results":"33","hashOfConfig":"19"},{"size":1970,"mtime":1620488033239,"results":"34","hashOfConfig":"19"},{"size":426,"mtime":1622030019269,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cc816",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx",["72","73"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport parse from 'date-fns/parse';\nimport parseISO from 'date-fns/parseISO';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getBrowserLanguage, getElementByClassNameRecursive } from '../../common-functions';\nimport ContentEditableInput from '../content-editable-input/content-editable-input.component';\nimport OverlayPanel from '../../overlay/overlay-panel/overlay-panel.component';\nimport DateTimeDaySelector, { DaySelectorTemplate } from './date-time-day-selector.component';\nimport DateTimeMonthSelector, { MonthSelectorTemplate } from './date-time-month-selector.component';\nimport DateTimeTimeSelector, { TimeSelectorTemplate } from './date-time-time-selector.component';\nimport { DateSelectionType, TimeConstraints } from './date-time-types';\nimport DateTimeYearSelector, { YearSelectorTemplate } from './date-time-year-selector.component';\nimport reducer, { DateTimeActionType, DateTimeState } from './date-time.reducer';\n\nexport interface DateTimeProps {\n  value?: string | Date;\n  label?: string;\n  useDefaultDateValue?: boolean;\n  locale?: string;\n  dateSelection?: DateSelectionType;\n  timeConstraints?: TimeConstraints;\n  onChange?: (value: Date) => void;\n  daySelectorTemplate?: DaySelectorTemplate;\n  monthSelectorTemplate?: MonthSelectorTemplate;\n  yearSelectorTemplate?: YearSelectorTemplate;\n  timeSelectorTemplate?: TimeSelectorTemplate;\n}\n\nexport default function DateTime({\n  value,\n  label,\n  useDefaultDateValue = false,\n  locale,\n  dateSelection = DateSelectionType.DateTime,\n  timeConstraints,\n  onChange,\n  daySelectorTemplate,\n  monthSelectorTemplate,\n  yearSelectorTemplate,\n  timeSelectorTemplate,\n}: DateTimeProps) {\n  const [selectorOpen, setSelectorOpen] = useState(false);\n  const [dropDownTarget, setDropDownTarget] = useState<Element>();\n  const language = useRef<string>(locale || getBrowserLanguage());\n  const loadedLocale = useRef<Locale>();\n\n  useEffect(() => {\n    if (language.current) {\n      loadLocale(language.current);\n    }\n  }, [language]);\n\n  useEffect(() => {\n    if (locale) {\n      loadLocale(locale);\n    }\n  }, [locale]);\n\n  const loadLocale = (localeToLoad: string) => {\n    import(`date-fns/locale/${localeToLoad}`)\n      .then((locale) => {\n        loadedLocale.current = locale.default;\n        console.log('local', loadedLocale.current);\n        const defaultDate = getDateValue();\n\n        if (value || useDefaultDateValue) {\n          dispatcher({\n            type: DateTimeActionType.InitializeDates,\n            initialDate: defaultDate,\n          });\n        } else {\n          dispatcher({\n            type: DateTimeActionType.SetViewDate,\n            viewDate: defaultDate,\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  };\n\n  const parseDate = (dateValue: string) => {\n    const isoDate = parseISO(dateValue);\n    if (isNaN(isoDate.valueOf())) {\n      // TODO Add an option for short, medium or long date format and create a proper format string (below) for each\n      // this is an attempt to parse a number of date formats\n      let localDate = parse(dateValue, 'Ppp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'P', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'pp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'p', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      return undefined;\n    }\n\n    return isoDate;\n  };\n\n  const getDateValue = () => {\n    const defaultDate = new Date();\n    defaultDate.setHours(0, 0, 0, 0);\n\n    return value ? (typeof value === 'string' ? parseDate(value) : value) : defaultDate;\n  };\n\n  const initialState: DateTimeState = {\n    currentSelector:\n      dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    currentViewDate: new Date(),\n    selectedDateChanged: false,\n    dateInitialized: false,\n  };\n\n  const [state, dispatcher] = useReducer(reducer, initialState);\n\n  const onFocus = (event: React.FocusEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(true);\n  };\n\n  const onInput = (event: React.FormEvent) => {\n    const inputDate = parseDate((event.target as HTMLElement).innerText);\n    if (inputDate) {\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: inputDate,\n      });\n      dispatcher({\n        type: DateTimeActionType.SetSelectedDate,\n        selectedDate: inputDate,\n      });\n    }\n  };\n\n  const onCalendarClick = (event: React.MouseEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(!selectorOpen);\n  };\n\n  const setDropDownElement = (event: React.FocusEvent | React.MouseEvent) => {\n    if (!dropDownTarget) {\n      const parentElement = getElementByClassNameRecursive(event.target as HTMLElement, 'parent-element');\n      setDropDownTarget(parentElement);\n    }\n  };\n\n  const onDateTimeHidden = () => {\n    setSelectorOpen(false);\n    dispatcher({\n      type:\n        dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    });\n\n    if (onChange && state.selectedDate && state.selectedDateChanged) {\n      onChange(state.selectedDate);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateChanged,\n        selectedDate: state.selectedDate,\n      });\n    }\n  };\n\n  const getValue = () => {\n    switch (dateSelection) {\n      case DateSelectionType.DateTime:\n        return state.selectedDate ? state.selectedDate.toLocaleString(language.current) : '';\n      case DateSelectionType.DateOnly:\n        return state.selectedDate ? state.selectedDate.toLocaleDateString(language.current) : '';\n      case DateSelectionType.TimeOnly:\n        return state.selectedDate ? state.selectedDate.toLocaleTimeString(language.current) : '';\n      default:\n        return state.selectedDate ? state.selectedDate.toLocaleString(language.current) : '';\n    }\n  };\n\n  const canShowDateSelectors =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.DateOnly;\n\n  const canShowTimeSelector =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.TimeOnly;\n\n  return (\n    <div>\n      {label && <label className=\"dark:text-white\">{label}</label>}\n      <ContentEditableInput\n        value={getValue()}\n        className=\"parent-element text-left\"\n        rightElement={<FontAwesomeIcon icon={['far', 'calendar-alt']} />}\n        rightElementClassName=\"cursor-pointer\"\n        onRightElementClick={onCalendarClick}\n        onFocus={onFocus}\n        onInput={onInput}\n      />\n      <OverlayPanel\n        visible={selectorOpen}\n        target={dropDownTarget}\n        shouldTargetCloseOverlay={false}\n        hidden={onDateTimeHidden}\n      >\n        <>\n          {state.currentSelector === DateTimeActionType.DaySelector &&\n            canShowDateSelectors &&\n            state.dateInitialized &&\n            loadedLocale.current && (\n              <DateTimeDaySelector\n                selectedDate={state.selectedDate}\n                viewDate={state.currentViewDate}\n                locale={loadedLocale.current}\n                showTimeSelector={dateSelection === DateSelectionType.DateTime}\n                dispatcher={dispatcher}\n                viewTemplate={daySelectorTemplate}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.MonthSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized && (\n              <DateTimeMonthSelector\n                viewDate={state.currentViewDate}\n                viewTemplate={monthSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.YearSelector &&\n            canShowDateSelectors &&\n            state.dateInitialized && (\n              <DateTimeYearSelector\n                viewDate={state.currentViewDate}\n                viewTemplate={yearSelectorTemplate}\n                dispatcher={dispatcher}\n              />\n            )}\n          {state.currentSelector === DateTimeActionType.TimeSelector &&\n            canShowTimeSelector &&\n            state.dateInitialized && (\n              <DateTimeTimeSelector\n                viewDate={state.currentViewDate}\n                showDateSelector={dateSelection === DateSelectionType.DateTime}\n                locale={language.current}\n                viewTemplate={timeSelectorTemplate}\n                timeConstraints={timeConstraints}\n                dispatcher={dispatcher}\n              />\n            )}\n        </>\n      </OverlayPanel>\n    </div>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx",["74"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Locale } from 'date-fns';\nimport addMonths from 'date-fns/addMonths';\nimport subMonths from 'date-fns/subMonths';\nimport React, { useEffect, useRef, useState } from 'react';\nimport TemplateOutlet, { TemplateFunction } from '../../common/template-outlet/template-outlet.component';\nimport { getDefaultTime, getMonthMatrix, getTranslatedDays } from './date-time-functions';\nimport { DateTimeActionType, DateTimeReducerAction } from './date-time.reducer';\n\nexport interface DateTimeDaySelectorProps {\n  selectedDate?: Date;\n  viewDate: Date;\n  locale: Locale;\n  showTimeSelector: boolean;\n  viewTemplate?: DaySelectorTemplate;\n  dispatcher: React.Dispatch<DateTimeReducerAction>;\n}\n\nexport interface DateTimeDaySelectorTemplateProps {\n  selectedDate?: Date;\n  viewDate: Date;\n  locale: Locale;\n  showTimeSelector: boolean;\n  monthMatrix?: Array<Array<Date | null>>;\n  translatedWeekDays?: Array<string>;\n  movePreviousMonth: () => void;\n  moveNextMonth: () => void;\n  onDateClicked: (date: Date) => void;\n  onMonthClicked: () => void;\n  onTimeClicked: () => void;\n}\n\nexport type DaySelectorTemplate = TemplateFunction<DateTimeDaySelectorTemplateProps>;\n\nexport default function DateTimeDaySelector({\n  selectedDate,\n  viewDate,\n  locale,\n  showTimeSelector,\n  viewTemplate,\n  dispatcher,\n}: DateTimeDaySelectorProps) {\n  const [monthMatrix, setMonthMatrix] = useState<Array<Array<Date | null>>>();\n  const weekDaysRef = useRef(getTranslatedDays(locale));\n\n  useEffect(() => {\n    if (viewDate) {\n      setMonthMatrix(getMonthMatrix(viewDate, locale));\n    }\n  }, [viewDate]);\n\n  const movePreviousMonth = () => {\n    if (viewDate) {\n      const previousMonth = subMonths(viewDate, 1);\n      setMonthMatrix(getMonthMatrix(previousMonth, locale));\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: previousMonth,\n      });\n    }\n  };\n\n  const moveNextMonth = () => {\n    if (viewDate) {\n      const nextMonth = addMonths(viewDate, 1);\n      setMonthMatrix(getMonthMatrix(nextMonth, locale));\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: nextMonth,\n      });\n    }\n  };\n\n  const onDateClicked = (date: Date) => {\n    dispatcher({\n      type: DateTimeActionType.SetSelectedDate,\n      selectedDate: date,\n    });\n    dispatcher({\n      type: DateTimeActionType.SetViewDate,\n      viewDate: date,\n    });\n  };\n\n  const onMonthClicked = () => {\n    dispatcher({\n      type: DateTimeActionType.MonthSelector,\n    });\n  };\n\n  const onTimeClicked = () => {\n    dispatcher({\n      type: DateTimeActionType.TimeSelector,\n    });\n  };\n\n  const getCurrentMonthYear = () => {\n    if (viewDate) {\n      return viewDate.toLocaleDateString(locale.code, {\n        month: 'long',\n        year: 'numeric',\n      });\n    }\n  };\n\n  const isSelectedDate = (currentDate: Date) => {\n    if (selectedDate) {\n      const comparisonDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n      return comparisonDate.toLocaleDateString() === currentDate.toLocaleDateString();\n    }\n\n    return false;\n  };\n\n  const templateProps: DateTimeDaySelectorTemplateProps = {\n    selectedDate,\n    viewDate,\n    locale,\n    showTimeSelector,\n    monthMatrix,\n    translatedWeekDays: weekDaysRef.current,\n    movePreviousMonth,\n    moveNextMonth,\n    onDateClicked,\n    onMonthClicked,\n    onTimeClicked,\n  };\n\n  const defaultTemplate = (\n    props: DateTimeDaySelectorTemplateProps,\n    children?: React.ReactNode | React.ReactNodeArray\n  ) => <div className=\"p-2\">{children}</div>;\n\n  const template = viewTemplate || defaultTemplate;\n\n  return (\n    <TemplateOutlet props={templateProps} template={template}>\n      <div className=\"w-full flex flex-row py-1 px-2\">\n        <div className=\"flex-shrink cursor-pointer\">\n          <button className=\"focus:outline-none\" onClick={movePreviousMonth}>\n            <FontAwesomeIcon icon={['fas', 'angle-left']} />\n          </button>\n        </div>\n        <div className=\"flex-grow text-center cursor-pointer\" onClick={onMonthClicked}>\n          {getCurrentMonthYear()}\n        </div>\n        <div className=\"flex-shrink cursor-pointer\">\n          <button className=\"focus:outline-none\" onClick={moveNextMonth}>\n            <FontAwesomeIcon icon={['fas', 'angle-right']} />\n          </button>\n        </div>\n      </div>\n      <div className=\"w-full\">\n        <div className=\"grid grid-cols-7 gap-3\">\n          {weekDaysRef.current.map((day, index) => (\n            <div key={index} className=\"text-center font-bold\">\n              {day}\n            </div>\n          ))}\n          {monthMatrix?.map((row, rIndex) =>\n            row.map((column, cIndex) => (\n              <div\n                key={rIndex.toString() + cIndex.toString()}\n                className={`text-center py-1 cursor-pointer${\n                  column && isSelectedDate(column) ? ' bg-blue-100 dark:bg-white dark:text-black rounded-full' : ''\n                }`}\n                onClick={() => column && onDateClicked(column)}\n              >\n                {column?.getDate().toLocaleString(locale.code)}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {showTimeSelector && (\n        <div className=\"w-full flex flex-row p-2 justify-center\">\n          <div\n            className=\"p-2 cursor-pointer hover:bg-gray-300 dark:hover:bg-white dark:hover:text-black dark:text-white\"\n            onClick={onTimeClicked}\n          >\n            {selectedDate?.toLocaleTimeString(locale.code) || getDefaultTime(locale)}\n          </div>\n        </div>\n      )}\n    </TemplateOutlet>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx",[],{"ruleId":"75","severity":1,"message":"76","line":51,"column":6,"nodeType":"77","endLine":51,"endColumn":16,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"76","line":57,"column":6,"nodeType":"77","endLine":57,"endColumn":14,"suggestions":"79"},{"ruleId":"75","severity":1,"message":"80","line":50,"column":6,"nodeType":"77","endLine":50,"endColumn":16,"suggestions":"81"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadLocale'. Either include it or remove the dependency array.","ArrayExpression",["82"],["83"],"React Hook useEffect has a missing dependency: 'locale'. Either include it or remove the dependency array. If 'setMonthMatrix' needs the current value of 'locale', you can also switch to useReducer instead of useState and read 'locale' in the reducer.",["84"],{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [language, loadLocale]",{"range":"91","text":"92"},"Update the dependencies array to be: [loadLocale, locale]",{"range":"93","text":"94"},"Update the dependencies array to be: [locale, viewDate]",{"range":"95","text":"96"},[2077,2087],"[language, loadLocale]",[2166,2174],"[loadLocale, locale]",[1635,1645],"[locale, viewDate]"]