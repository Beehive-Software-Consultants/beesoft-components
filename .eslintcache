[{"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts":"1","/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts":"2","/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts":"3","/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts":"4","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx":"5","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts":"6","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx":"7","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts":"8","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx":"9","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx":"10","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx":"11","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx":"12","/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx":"13","/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx":"14","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts":"15","/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx":"16","/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx":"17","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx":"18","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx":"19","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx":"20","/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts":"21"},{"size":1086,"mtime":1623583029073,"results":"22","hashOfConfig":"23"},{"size":1117,"mtime":1621078065416,"results":"24","hashOfConfig":"23"},{"size":1182,"mtime":1613225443706,"results":"25","hashOfConfig":"23"},{"size":321,"mtime":1616829375770,"results":"26","hashOfConfig":"23"},{"size":4338,"mtime":1625143315170,"results":"27","hashOfConfig":"23"},{"size":545,"mtime":1626656608502,"results":"28","hashOfConfig":"23"},{"size":13625,"mtime":1626656903853,"results":"29","hashOfConfig":"23"},{"size":3992,"mtime":1625143315172,"results":"30","hashOfConfig":"23"},{"size":5827,"mtime":1626656608502,"results":"31","hashOfConfig":"23"},{"size":2227,"mtime":1626656608502,"results":"32","hashOfConfig":"23"},{"size":2253,"mtime":1626656608500,"results":"33","hashOfConfig":"23"},{"size":2667,"mtime":1626656608500,"results":"34","hashOfConfig":"23"},{"size":2303,"mtime":1622981443801,"results":"35","hashOfConfig":"23"},{"size":4163,"mtime":1626656676356,"results":"36","hashOfConfig":"23"},{"size":5457,"mtime":1624797299167,"results":"37","hashOfConfig":"23"},{"size":1964,"mtime":1626656676353,"results":"38","hashOfConfig":"23"},{"size":426,"mtime":1622030019269,"results":"39","hashOfConfig":"23"},{"size":7939,"mtime":1626656608499,"results":"40","hashOfConfig":"23"},{"size":3127,"mtime":1626656608501,"results":"41","hashOfConfig":"23"},{"size":2152,"mtime":1626656608501,"results":"42","hashOfConfig":"23"},{"size":632,"mtime":1624797299164,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"159z7wp",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/System/Volumes/Data/development/beesoft-components/src/components/dom-handler.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-event-handlers.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/font-awesome.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.stories.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-types.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.component.tsx",["87"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport parse from 'date-fns/parse';\nimport parseISO from 'date-fns/parseISO';\nimport React, { createContext, useEffect, useReducer, useRef, useState } from 'react';\nimport { getBrowserLanguage, getElementByClassNameRecursive } from '../../common-functions';\nimport OverlayPanel from '../../overlay/overlay-panel/overlay-panel.component';\nimport ContentEditableInput from '../content-editable-input/content-editable-input.component';\nimport { DateTimeCalendarTemplate } from './date-time-calendar.component';\nimport DateTimeDaySelector from './date-time-day-selector.component';\nimport { loadLocale } from './date-time-functions';\nimport DateTimeMonthSelector from './date-time-month-selector.component';\nimport DateTimeRangeSelector from './date-time-range-selector.component';\nimport { DateTimeScrollerTemplate } from './date-time-scroller.component';\nimport DateTimeTimeSelector from './date-time-time-selector.component';\nimport { CalendarIconPosition, DateFormatType, DateSelectionType, TimeConstraints } from './date-time-types';\nimport DateTimeYearSelector from './date-time-year-selector.component';\nimport reducer, { DateTimeActionType, DateTimeState } from './date-time.reducer';\n\nexport interface DateTimeProps {\n  value?: string | Date | Array<Date>;\n  label?: string;\n  useDefaultDateValue?: boolean;\n  locale?: string;\n  dateSelection?: DateSelectionType;\n  dateFormat?: DateFormatType;\n  timeConstraints?: TimeConstraints;\n  iconPosition?: CalendarIconPosition;\n  selectableDate?: (currentDate: Date) => boolean;\n  isValidDate?: (selectedDate: Date) => boolean;\n  onChange?: (value: Date | Array<Date>) => void;\n  calendarTemplate?: DateTimeCalendarTemplate;\n  dateScrollerTemplate?: DateTimeScrollerTemplate;\n}\n\ninterface DateTimeContextProps {\n  calendarTemplate?: DateTimeCalendarTemplate;\n  dateScrollerTemplate?: DateTimeScrollerTemplate;\n}\n\nexport const DateTimeContext = createContext<DateTimeContextProps>(undefined!);\n\nexport default function DateTime({\n  value,\n  label,\n  useDefaultDateValue = false,\n  locale,\n  dateSelection = DateSelectionType.DateTime,\n  dateFormat,\n  timeConstraints,\n  iconPosition = CalendarIconPosition.Right,\n  selectableDate,\n  isValidDate,\n  onChange,\n  calendarTemplate,\n  dateScrollerTemplate,\n}: DateTimeProps) {\n  const [selectorOpen, setSelectorOpen] = useState(false);\n  const [dropDownTarget, setDropDownTarget] = useState<Element>();\n  const language = useRef<string>(locale || getBrowserLanguage());\n  const loadedLocale = useRef<Locale>();\n\n  const contextProps: DateTimeContextProps = {\n    calendarTemplate,\n    dateScrollerTemplate,\n  };\n\n  useEffect(() => {\n    if (language.current) {\n      loadLocaleObject(language.current);\n    }\n  }, [language]);\n\n  useEffect(() => {\n    if (locale) {\n      loadLocaleObject(locale);\n    }\n  }, [locale]);\n\n  useEffect(() => {\n    if (value) {\n      const dateValue = getDateValue();\n      dispatcher({\n        type: DateTimeActionType.InitializeDates,\n        initialDate: dateValue,\n      });\n    }\n  }, [value, loadedLocale.current]);\n\n  const loadLocaleObject = (localeToLoad: string) => {\n    loadLocale(localeToLoad)\n      .then((locale) => {\n        loadedLocale.current = locale;\n        const defaultDate = getDateValue();\n\n        if (value || useDefaultDateValue) {\n          dispatcher({\n            type: DateTimeActionType.InitializeDates,\n            initialDate: !Array.isArray(defaultDate) ? defaultDate : defaultDate[0],\n          });\n        } else {\n          dispatcher({\n            type: DateTimeActionType.SetViewDate,\n            viewDate: !Array.isArray(defaultDate) ? defaultDate : defaultDate[0],\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  };\n\n  const parseDate = (dateValue: string) => {\n    const isoDate = parseISO(dateValue);\n    if (isNaN(isoDate.valueOf())) {\n      // this is an attempt to parse a number of date formats\n      let localDate = parse(dateValue, 'Ppp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'P', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'pp', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      localDate = parse(dateValue, 'p', new Date(), { locale: loadedLocale.current });\n      if (!isNaN(localDate.valueOf())) return localDate;\n\n      return undefined;\n    }\n\n    return isoDate;\n  };\n\n  const parseDateRange = (dateRangeValue: string) => {\n    const datesToParse = dateRangeValue.split('-');\n    if (datesToParse.length !== 2) return undefined;\n\n    const dateValue1 = parseDate(datesToParse[0].trim());\n    if (!dateValue1) return undefined;\n\n    const dateValue2 = parseDate(datesToParse[1].trim());\n    if (!dateValue2) return undefined;\n\n    return [dateValue1, dateValue2];\n  };\n\n  const getDateValue = () => {\n    const defaultDate = new Date();\n    defaultDate.setHours(0, 0, 0, 0);\n\n    return value\n      ? typeof value === 'string'\n        ? dateSelection !== DateSelectionType.DateRange\n          ? parseDate(value)\n          : parseDateRange(value)\n        : value\n      : defaultDate;\n  };\n\n  const initialState: DateTimeState = {\n    currentSelector:\n      dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    currentViewDate: new Date(),\n    selectedDateChanged: false,\n    dateInitialized: false,\n  };\n\n  const [state, dispatcher] = useReducer(reducer, initialState);\n\n  const onFocus = (event: React.FocusEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(true);\n  };\n\n  const onInput = (event: React.FormEvent) => {\n    const inputDate = parseDate((event.target as HTMLElement).innerText);\n    if (inputDate) {\n      dispatcher({\n        type: DateTimeActionType.SetViewDate,\n        viewDate: inputDate,\n      });\n      dispatcher({\n        type: DateTimeActionType.SetSelectedDate,\n        selectedDate: inputDate,\n      });\n    }\n  };\n\n  const onCalendarClick = (event: React.MouseEvent) => {\n    setDropDownElement(event);\n    setSelectorOpen(!selectorOpen);\n  };\n\n  const setDropDownElement = (event: React.FocusEvent | React.MouseEvent) => {\n    if (!dropDownTarget) {\n      const parentElement = getElementByClassNameRecursive(event.target as HTMLElement, 'parent-element');\n      setDropDownTarget(parentElement);\n    }\n  };\n\n  const onDateTimeHidden = () => {\n    setSelectorOpen(false);\n    dispatcher({\n      type:\n        dateSelection === DateSelectionType.TimeOnly ? DateTimeActionType.TimeSelector : DateTimeActionType.DaySelector,\n    });\n\n    if (onChange && dateSelection !== DateSelectionType.DateRange && state.selectedDate && state.selectedDateChanged) {\n      onChange(state.selectedDate);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateChanged,\n        selectedDate: state.selectedDate,\n      });\n    } else if (onChange && state.selectedStartDate && state.selectedEndDate && state.selectedDateChanged) {\n      onChange([state.selectedStartDate, state.selectedEndDate]);\n      dispatcher({\n        type: DateTimeActionType.ResetSelectedDateRangeChanged,\n        selectedStartDate: state.selectedStartDate,\n        selectedEndDate: state.selectedEndDate,\n      });\n    }\n  };\n\n  const getDateTimeStyle = () => {\n    switch (dateFormat) {\n      case DateFormatType.Short:\n        return 'short';\n      case DateFormatType.Medium:\n        return 'medium';\n      case DateFormatType.Long:\n        return 'long';\n      default:\n        return undefined;\n    }\n  };\n\n  const getValue = () => {\n    const dateStyle = getDateTimeStyle();\n\n    switch (dateSelection) {\n      case DateSelectionType.DateTime:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.DateOnly:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleDateString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.TimeOnly:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleTimeString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n      case DateSelectionType.DateRange:\n        return state.selectedStartDate && state.selectedEndDate\n          ? dateStyle\n            ? `${state.selectedStartDate.toLocaleDateString(loadedLocale.current?.code, {\n                dateStyle,\n              })} - ${state.selectedEndDate.toLocaleDateString(loadedLocale.current?.code, { dateStyle })}`\n            : `${state.selectedStartDate.toLocaleDateString(\n                loadedLocale.current?.code\n              )} - ${state.selectedEndDate.toLocaleDateString(loadedLocale.current?.code)}`\n          : '';\n      default:\n        return state.selectedDate\n          ? dateStyle\n            ? state.selectedDate.toLocaleString(loadedLocale.current?.code, {\n                dateStyle: dateStyle,\n                timeStyle: dateStyle,\n              })\n            : state.selectedDate.toLocaleString(loadedLocale.current?.code)\n          : '';\n    }\n  };\n\n  const canShowDateSelectors =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.DateOnly;\n\n  const canShowTimeSelector =\n    dateSelection === DateSelectionType.DateTime || dateSelection === DateSelectionType.TimeOnly;\n\n  const inputProps =\n    iconPosition === CalendarIconPosition.Right\n      ? {\n          rightElement: <FontAwesomeIcon icon={['far', 'calendar-alt']} />,\n          rightElementClassName: 'cursor-pointer',\n          onRightElementClick: onCalendarClick,\n        }\n      : {\n          leftElement: <FontAwesomeIcon icon={['far', 'calendar-alt']} />,\n          leftElementClassName: 'cursor-pointer',\n          onLeftElementClick: onCalendarClick,\n        };\n\n  return (\n    <DateTimeContext.Provider value={contextProps}>\n      <div className=\"bc-date-time\">\n        {label && <label className=\"dark:text-white bc-dt-label\">{label}</label>}\n        <ContentEditableInput\n          value={getValue()}\n          className=\"parent-element text-left bc-dt-input\"\n          onFocus={onFocus}\n          onInput={onInput}\n          {...inputProps}\n        />\n        <OverlayPanel\n          visible={selectorOpen}\n          target={dropDownTarget}\n          shouldTargetCloseOverlay={false}\n          hidden={onDateTimeHidden}\n        >\n          <>\n            {state.currentSelector === DateTimeActionType.DaySelector &&\n              canShowDateSelectors &&\n              state.dateInitialized &&\n              loadedLocale.current && (\n                <DateTimeDaySelector\n                  selectedDate={state.selectedDate}\n                  viewDate={state.currentViewDate}\n                  locale={loadedLocale.current}\n                  showTimeSelector={dateSelection === DateSelectionType.DateTime}\n                  selectableDate={selectableDate}\n                  isValidDate={isValidDate}\n                  dispatcher={dispatcher}\n                />\n              )}\n            {state.currentSelector === DateTimeActionType.MonthSelector &&\n              canShowDateSelectors &&\n              state.dateInitialized &&\n              loadedLocale.current && (\n                <DateTimeMonthSelector\n                  viewDate={state.currentViewDate}\n                  locale={loadedLocale.current}\n                  dispatcher={dispatcher}\n                />\n              )}\n            {state.currentSelector === DateTimeActionType.YearSelector &&\n              canShowDateSelectors &&\n              state.dateInitialized &&\n              loadedLocale.current && (\n                <DateTimeYearSelector\n                  viewDate={state.currentViewDate}\n                  locale={loadedLocale.current}\n                  dispatcher={dispatcher}\n                />\n              )}\n            {state.currentSelector === DateTimeActionType.TimeSelector &&\n              canShowTimeSelector &&\n              state.dateInitialized &&\n              loadedLocale.current && (\n                <DateTimeTimeSelector\n                  viewDate={state.currentViewDate}\n                  showDateSelector={dateSelection === DateSelectionType.DateTime}\n                  locale={loadedLocale.current}\n                  timeConstraints={timeConstraints}\n                  dispatcher={dispatcher}\n                />\n              )}\n            {dateSelection === DateSelectionType.DateRange && state.dateInitialized && loadedLocale.current && (\n              <DateTimeRangeSelector\n                viewDate={state.currentViewDate}\n                selectedStartDate={state.selectedStartDate}\n                selectedEndDate={state.selectedEndDate}\n                locale={loadedLocale.current}\n                dispatcher={dispatcher}\n              />\n            )}\n          </>\n        </OverlayPanel>\n      </div>\n    </DateTimeContext.Provider>\n  );\n}\n","/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time.reducer.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-time-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-year-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-month-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-day-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/content-editable-input/content-editable-input.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/overlay/overlay-panel/overlay-panel.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-functions.ts",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/beesoft-transition/beesoft-transition.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common/template-outlet/template-outlet.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-calendar.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-range-selector.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/form/date-time/date-time-scroller.component.tsx",[],"/System/Volumes/Data/development/beesoft-components/src/components/common-hooks.ts",[],{"ruleId":"88","severity":1,"message":"89","line":40,"column":68,"nodeType":"90","messageId":"91","endLine":40,"endColumn":78},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull"]